project_rules:
  name: Smart MCQ Platform Development Rules
  created: 2025-01-10
  
mandatory_actions:
  on_every_prompt:
    - Read version.yaml for current specifications
    - Read dev_log.yaml for project history
    - Read CLAUDE.md for project guidance
    - Read rules.yaml for development rules
    - Update dev_log.yaml with current prompt details
    - Follow version control progression strictly

  before_new_chat:
    required_files_to_read:
      - version.yaml
      - dev_log.yaml
      - CLAUDE.md
      - rules.yaml

tech_stack_rules:
  allowed_until_v3_6:
    - Django
    - PostgreSQL
    - Bootstrap
    - Python standard library
    - uv for package management
  
  forbidden_until_v3_6:
    - Redis
    - Celery
    - Any external CSS frameworks besides Bootstrap
    - Any JavaScript frameworks
    - Any additional databases
    - Any third-party authentication services
  
  exceptions_allowed:
    - ReportLab for PDF (only in v2.5)
    - Email backends for notifications (v2.7)

version_control_rules:
  strict_progression:
    - Never implement features from future versions
    - Complete current version fully before moving to next
    - Follow version.yaml specifications exactly
    - No premature optimization
    - No adding features not specified in current version
  
  current_version_focus:
    - Only work on features listed in current version
    - Stick to MVP answers provided in version.yaml
    - Use industry_solution notes as guidance
    - Complete all requirements before version completion

development_discipline:
  forbidden_actions:
    - Starting future features early
    - Adding dependencies not specified
    - Implementing complex solutions when simple ones suffice
    - Deviating from version.yaml specifications
    - Skipping logging updates
  
  required_actions:
    - Update dev_log.yaml on every change
    - Follow Django best practices
    - Keep code simple and maintainable
    - Test each feature before moving forward
    - Document any deviations with reasons

logging_rules:
  log_file_management:
    location: "/logs/ directory with numbered sequence"
    current_log: "Latest numbered log file (e.g., log_3.yaml)"
    file_size_limit: "500 lines maximum per log file"
    rollover: "Create new log file when 500 lines exceeded"
    current_status: "logs/current.yaml for version progress only"
    
  update_log_files:
    when:
      - Every user prompt received
      - Every file created or modified
      - Every version milestone reached
      - Every issue encountered and resolved
    
    format:
      - Add new prompt entry with date and prompt_id
      - List user requests clearly
      - Document actions taken
      - Note files created/modified/deleted
      - Update logs/current.yaml for version progress only
      - Set prompt status (completed/in_progress/blocked)
      
    file_rotation:
      - Check current log file length before adding entries
      - If exceeds 500 lines, create new log_X.yaml file
      - Continue logging in new file with incremented number
      - Update current.yaml only for version completion status

file_management:
  core_files:
    - version.yaml (project specification)
    - logs/current.yaml (version progress status only)
    - logs/log_X.yaml (detailed development history)
    - CLAUDE.md (project guidance)
    - rules.yaml (this file)
    - docker-compose.yml (database setup)
    - start.py (startup script)
  
  never_delete:
    - version.yaml
    - logs/ directory and all log files
    - CLAUDE.md
    - rules.yaml

version_completion_criteria:
  before_marking_version_complete:
    - All features in version.yaml answers implemented
    - All tests passing (when tests exist)
    - Database migrations successful
    - No major bugs or issues
    - Code follows Django best practices
    - Documentation updated
    - Push to GitHub after each version completion
    - Never move to next version until current is fully complete and pushed

version_workflow:
  strict_process:
    - Complete version fully according to specification
    - Test that everything works
    - Mark version as completed in dev_log.yaml
    - Push to GitHub with version tag
    - Only then move to next version
  
  forbidden_actions:
    - Going too far beyond current version requirements
    - Starting next version before current is complete
    - Implementing features not in current version spec
    - Skipping GitHub push after version completion

handoff_preparation:
  when_starting_new_chat:
    - Read all required files first
    - Understand current version progress
    - Review recent dev_log entries
    - Follow established patterns
    - Respect all rules and constraints

constants_and_format_rules:
  date_time_formatting:
    template_rules:
      - ALWAYS use smart_mcq.constants.DateTimeFormats constants
      - For JavaScript consumption: ALWAYS use |date:"c" (ISO 8601 format)
      - For user display: use DateTimeFormats.DISPLAY_DATETIME ("M d, Y g:i A")
      - For date-only display: use DateTimeFormats.DISPLAY_DATE ("M d, Y")
      - NEVER use custom format strings like "Y-m-d H:i:s" with JavaScript
      - NEVER append " UTC" to date strings in JavaScript
    
    javascript_rules:
      - ALWAYS use new Date(isoString) for parsing Django |date:"c" output
      - NEVER use new Date(customFormat + " UTC") pattern
      - Use .toLocaleString() for user-friendly display
      - Use .getTime() for calculations and comparisons
      - Store timer states with consistent format
    
    backend_rules:
      - Import constants from smart_mcq.constants
      - Use timezone.now() for current time
      - Use timezone.localtime() for display conversion
      - NEVER hardcode datetime format strings
  
  constants_usage:
    mandatory_imports:
      - "from smart_mcq.constants import MultipleChoice, AccessCode, UserRoles"
      - Import specific constant classes as needed
    
    forbidden_hardcoded_values:
      - Access code length (use AccessCode.LENGTH)
      - Choice labels A,B,C,D (use MultipleChoice.VALID_CHOICES)
      - Role strings (use UserRoles.STUDENT/TEACHER)
      - Group names (use UserRoles.GROUP_STUDENTS/TEACHERS)
      - Field max_length values (use FieldLengths constants)
      - Default values (use Defaults constants)
      - Status strings (use SessionStatus constants)
    
    required_constants:
      - All field lengths must use FieldLengths class
      - All choices must use predefined choice constants
      - All default values must use Defaults class
      - All validation rules must use Validation class
      - All error/success messages must use ErrorMessages/SuccessMessages

  format_consistency_rules:
    template_date_formats:
      - Display to users: {{ datetime|date:"M d, Y g:i A" }}
      - JavaScript data: data-time="{{ datetime|date:'c' }}"
      - Date only: {{ date|date:"M d, Y" }}
      - NEVER mix format types in same template
    
    javascript_date_handling:
      - Parse: new Date('{{ datetime|date:"c" }}')
      - Display: date.toLocaleString()
      - Calculate: date.getTime()
      - NEVER use string concatenation for time zones
    
    backend_consistency:
      - Use constants for all magic numbers
      - Use constants for all repeated strings
      - Use constants for all validation rules
      - Import from smart_mcq.constants module

  new_feature_requirements:
    before_implementation:
      - Check if constants exist for needed values
      - Add new constants to constants.py if needed
      - Use existing date format patterns
      - Follow established naming conventions
    
    constant_naming_convention:
      - Class names: PascalCase (e.g., DateTimeFormats)
      - Constant names: UPPER_SNAKE_CASE (e.g., ACCESS_CODE_LENGTH)
      - Group related constants in classes
      - Use descriptive names (avoid abbreviations)

violation_consequences:
  if_rules_broken:
    - Stop immediately
    - Review rules.yaml
    - Correct the violation
    - Update dev_log.yaml with correction
    - Continue following rules strictly
  
  format_violations:
    - Revert to proper format constants immediately
    - Check all related files for same violation
    - Update constants.py if new formats needed
    - Test date/time functionality thoroughly